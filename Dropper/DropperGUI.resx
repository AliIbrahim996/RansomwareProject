<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAk14pALB2SwCrckUHsHVJK691SUGwdUkyrXJHDLN/
        UQCkVjMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACzeEsAsndLIrl/U5jGjGDfzZNn8siO
        Yua7gVWss3dMNrh6TQCzeE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtXlNALJ2Shm9gla42aB0/+yz
        h//wt4v/7rSI/9+lef/BhlrUs3dLL7R5TgAAAAAAAAAAAAAAAAAAAAAAsHZJALB2RwqzeExHt3xQg7d9
        UY61eU5ksXVKHbKdcACxckYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALV5TwC+hFYAtntPb9Sa
        bv3wt4v/8LeL//C3i//wt4v/8biM/9yid/+5flOYqW9CBLR6TgAAAAAAAAAAALN4TQCxdksTuX5SlsyS
        ZfPco3b/36V5/9SZbvy/hVjJs3hMPbV7TgC0eU0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtXpOAKFm
        OgS8gVWu5at///G4jP/wt4v/8LeL//C3i//wt4v/67KG/8KIXNGtckYWtXpOAAAAAAC1eU0AnV80Abd8
        UIDTmW387rWJ//G4jP/xuIz/8biM/+GofP+/hFnIsXZKHLZ6TgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC1ek4Ao2g8Br2DV7nnroL/8biM//C3i//wt4v/8LeL//C3i//utYn/xYtf4a1yRh21ek4AAAAAALV6
        TwCvdEkfxIld2Ouxhf/wt4v/8LeL//C3i//wt4v/8LeL/9Oabvy1ek5kt3xQAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALV6TwBWFwAAuX5Sj92jd//xuIz/8LeL//C3i//wt4v/8LeL/+61if/Fi1/irXJGHbV6
        TgAAAAAAtXpOALB1STjNkmbz8LeL//C3i//wt4v/8LeL//C3i//xuIz/36V5/7d9UY67gFQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAtHdMALV6TgCzd0w4xYtf4ueugv/xuIz/8biM//G4jP/rsob/566C/8WL
        X+KtckYdtXpOAAAAAAC1ek4AsHVJMsqQZOzvtor/8LeL//C3i//wt4v/8LeL//G4jP/hp3v/uH1RlryB
        VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtHtNAK53RwK1ek5Zw4ld3Neecf7gpnr/2qF0/sWL
        X/vXnXH/xoxg4q1yRh21ek4AAAAAALV5TwCuc0gRv4RYv+Srf//xuIz/8LeL//C3i//wt4v/8biM/+Gn
        e/+4fVGWvIFVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr3VLAK5zSQKydkoqtXpOcbh9
        UZG2e094s3hMltaccP/GjGDirXJGHbV6TgAAAAAAtXhOALd/UAC0eU1Px4xg6OSrf//utYn/8LeL/+qw
        hP/boXX/3KN3/7h9UZa8gVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALV6TgC0eU1p1pxw/8aMYOKtckYdtXpOAAAAAAAAAAAAs3lMAK94SAO0eU1Pv4RYwMqQ
        ZO3Nkmbzw4lc276DV/DaoHT/uX5SlryBVQAAAAAAAAAAAAAAAAAAAAAAOTnBADk5wQg5OcEYOTnBGDk5
        wQg5OcEAAAAAAAAAAAAAAAAAtXpOALR5TWnWnHD/xoxg4q1yRh21ek4AAAAAAAAAAAAAAAAAqWU5AAAA
        AACvc0cRsHVJMrB1STmuc0Ynv4RYxNqgdP+5flKWvIFVAAAAAAAAAAAAQUHEAD8/wQJBQcZES0vNqVZW
        09dVVdPXS0vMqUFBxkQ/P8ECQUHEAAAAAAC1ek4AtHlNadaccP/GjGDirXJGHbV6TgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAtXpOAKVpPQe/hFjB2qB0/7l+Upa8gVUAAAAAAENDxQBRUdQAQ0PGVVlZ
        1eh7e+v/ior0/4mJ9P97e+r/WVnV6ENDxlVLS9EARETFALV6TgC0eU1p1pxw/8aMYOKtckYdtXpOAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1ek4ApWk9B7+EWMHaoHT/uX5SlryBVQAAAAAAQ0PHAD09
        xB1SUtDPgoLv/5CQ+P+Pj/f/j4/3/5CQ+P+Cgu//UlLQzj09wx1DQ8cAtXpOALR5TWnWnHD/xYtf5Ktw
        RCZ6PxEBcSgJAI9NJwAAAAAAAAAAAAAAAAAAAAAAAAAAALV6TgClaT0Hv4RYwdqgdP+5flKWvIFVAAAA
        AABDQ8cAQEDFUGdn3viQkPf/j4/3/4+P9/+Pj/f/j4/3/4+P9/9nZ933QEDFUENDxwC1ek4AtHlNadac
        cP/PlGj5voNXx7yBVaO3fVCAs3hMXbJ3Sz+vdEgjrXJGE6twRQekaEUAtHlNAKVpPQe/hFjB2qB0/7l+
        Upa8gVUAAAAAAENDxwBBQcZibm7i/5CQ+P+Pj/f/j4/3/4+P9/+Pj/f/kJD4/29v4/9BQcZnQ0PHALV6
        TgC0eU1p155y/+61if/or4P/46l9/9yidv/Vm2/8z5Ro8MeMYOLBh1vLvIFVrrd9UY61e09qsXZKTb2D
        V87aoHT/uX5SlryBVQAAAAAAQ0PHAEBAxkdkZNz0jo73/4+P9/+Pj/f/j4/3/4+P9/+Rkfj/b2/j/0FB
        xmlDQ8cAtXpOALR5TWnXnnL/8biM//C3i//xuIz/8biM//G4jP/vtor/7rWJ/+qwhP/kq37/3qV5/9ee
        cf7PlWn4zZRo/Nyidv+4fVGWvIFVAAAAAABDQ8cAPDzDFE5Ozr18fOv/kJD4/5CQ9/+QkPf/j4/3/4uL
        9f9vb+P/QUHGaUNDxwC1ek4AtHlNadeecv/xuIz/8LeL//C3i//wt4v/8LeL//C3i//wt4v/8LeL//G4
        jP/xuIz/8biM//C3i//vtor/4ad7/7h9UZa8gVUAAAAAADw8xgBERMcAQUHFO1JS0dFwcOT/goLv/4KC
        7/9vb+P/ZGTc/21t4v9BQcZpQ0PHALV6TgC0eU1p1Jpu/+61if/wt4v/8biM//G4jP/xuIz/8LeL//C3
        i//wt4v/8LeL//C3i//wt4v/8LeL//G4jP/hp3v/uH1RlryBVQAAAAAAAAAAAD09wwBNTcwAPz/EKEZG
        yYBNTc21TU3NtUREx5VYWNTtbW3i/0FBxmlDQ8cAtXpOALV6TU6+g1fMyI5i4M6UaPTVm2/93KN3/+Op
        ff/nroL/7LOH/++2iv/wt4v/8biM//G4jP/wuIz/8biM/+Gne/+4fVGWvIFVAAAAAAAAAAAAAAAAAAAA
        AAAoKLQAKCi0ASwsuQUhIbIEOTnAHllZ1eJtbeL/QUHGaUNDxwC2ekwAtXpNA7J1RhGxdEclsXZKPbR6
        TV63fFCBun9TosCFWb/Fil7cy5Fl7tKYbPnZn3P/4KZ6/+etgf/ss4f/36V5/7h9UZa8gVUAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAENDxwA5OcEdWVnV4m1t4v9BQcZpQ0PHAAAAAAA8P80ANTzVBjk+
        0AU6Ps8AeT0jAMCJUwCja0ADrHBEDq50Rx6xd0o4s3hMVrZ7T3O6gFOWvoNXucSJXdLEiV3stntPkbh9
        UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ0PHADk5wR1ZWdXibW3i/0FBxmlDQ8cAOjrCCEBA
        xUBDQ8ecQ0PHM0NDxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbKQAA/8+cAI9XKwKlaj8HrXJGF7F2
        Si61ek4mtHhNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDQ8cAOTnBHVlZ1eJtbeL/QUHGcD8/
        xTpJScuiXl7Y7VVV0vhAQMU+Q0PHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAENDxwA5OcEdWVnV4m1t
        4f9HR8nZXl7Y6nl56f+NjfX/ZGTc+D09wz5DQ8cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ0PHADk5
        wR1ZWdXifHzr/3l56f+MjPX/kZH4/4+P9/9gYNr4PT3DPkNDxwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABDQ8cAOTnBHVhY1OKNjfX/kZH4/4+P9/+AgO7/ZWXd90tLzbpBQcUjQ0PHAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAENDxwA5OcEdWFjU4ouL9f+AgO7/Zmbd909Pzr5CQsZbPT3EEjMzvABDQ8gAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQ0PHAD09wx1QUM/iZGTc+U9Pzr1BQcZaOzvCEUNDyQA0NLwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDQ8cAQ0PHGUNDx6FCQsZcPDzDEkBAwwA8PMQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAENDyABDQ8gEQ0PHDTQ0/wBERMMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4P///8B///+APwP/gB4B/wAcAP8AHAD/gBwA/4AcAP+AHAD/wB4A//4
        eAPw+H4DwDh/w8A4f8OAGD/DgBgAw4AYAAOAGAADgBgAA8AYAAPgGAAD8BgAA/4c4AP+EP+D/gD///4A
        ///+AP///gD///4B///+B////h////5///8=
</value>
  </data>
</root>